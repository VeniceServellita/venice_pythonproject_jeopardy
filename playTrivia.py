"""
Name: Venice Servellita
Class: CS521 01 - Summer 1 2018
Date: 06/22/2018
Description:
    
The J! mini-game
 
This is a Python mini-version of the beloved trivia game, Jeopardy!(tm).
All data are derived from the J! archives --- a fan-created CSV database 
containing past Jeopardy!(tm) data which includes questions and their 
corresponding answers, money values, categories and round classification
(regular or final). There are a total of 216930 questions from this CSV file
(213296 regular questions + 3634 final jeopardy questions). 

Using the questionGenerator and moneyQuestionAns modules, this playTrivia
module will execute the game upon opening the file. A message will prompt
the user to enter number of regular Jeopardy questions the user wants to
answer and the questions with corresponding money value and category will
be displayed one at a time. 
"""

import sys
from questionGenerator import QuestionGenerator


def main():
    """
    this function initializes and executes the J! mini game using objects
    created from QuestionGenerator class and invoking functions from
    MoneyQuestAnsCat class
    """
    
    print("\nLet's play J!...\n")
     
    print("This is a simple trivia game inspired by the iconic TV game show,\
 \nJeopardy! (tm). All data are derived from the J! archives --- a fan-created\
 \ndatabase of all past Jeopardy!(tm) questions and answers.\n\
 \nRULES OF THE GAME:\n\n1. When you open the playTrivia file, a message will\
 appear and you will be\nprompted to enter the number of questions you would\
 like to answer.\n\
 \n2. Each random question is worth a pre-determined amount of money which \
 \nwill correspond to your score. The questions will also come from several\
 \nrandom categories. If you enter the correct answer, the specified amount\
 \nwill be added to your score. However, if you answer incorrectly, the same\
 \namount will be deducted from your balance.\n\n3. By default, a final J!\
 question will appear at the end if you qualify,\ni.e. if you have a positive\
 score. If you are in the negative or has zero balance,\nyou don't qualify and\
 the program will automatically terminate.\n\n4. If you qualify, before the\
 Final Question appears, you will be\nprompted to enter your wager. The amount\
 of your wager should not exceed your balance. Otherwise, the program will\
 continue to prompt you to enter a\nvalid wager.\n\
 \nHave fun playing and good luck!")
    
    # Prompts user to enter a numeric (integer) input for number of questions
    #    minimum = 1 and maximum = 213926 
    print ("\nThere are about 213296 questions in this round.\nTo start\
 playing, you must first enter a number from 1 to 213926.")
    # uses the get_valid_input function to check for valid user input
    questions_num = get_valid_input("Enter a number (integers only, no commas): ")
    
    print("\n-------------------------------------------------------------\
---------------")
    
    # creates an object from QuestionGenerator class to generate question list
    #       based on the questions_num input above
    qg = QuestionGenerator(questions_num)  
    
    #iterates through the questions generated by QuestionGenerator
    for i in range(len(qg.question_list) - 1): # last question is from FinalList
        
        # invokes question_list method from QuestionGenerator class
        mqa = qg.question_list[i]
        
        # displays the question, index, category and amount
        print("\nQUESTION # " + str(i + 1) + " for $" + str(mqa.get_amount()))
        print("\nThe category is: ", mqa.get_category(), "\n")
        print(mqa.get_question())
        
        # Prompts user to enter the answer, or exit the game
        input_answer = input("Please type your answer, type QUIT or quit to exit game:\n\n")
        if input_answer.lower() == "quit":
            print ("\nYou have exited the game. Thanks for playing!")
            sys.exit()  # exits the program
        # Check if answer is correct or not
        if input_answer.lower() == mqa.get_answer().lower(): # so answers will be both in lowercase
            print("\nYou are CORRECT. You gained $", mqa.get_amount())
            qg.total += int(mqa.get_amount())   # adds amount
        else:
            print("\nSorry, your answer is INCORRECT. You lost $", mqa.get_amount())
            # displays the correct answer if user enters incorrect answer
            print("\nThe correct answer is: ", mqa.get_answer())
            qg.total -= int(mqa.get_amount())  # subtracts amount
        print()
        print("Your current score is $", qg.total)  # gets current balance
        print("\n-------------------------------------------------------------\
---------------")
        
    if int(qg.total) < 1:  # eliminates player with zero or negative balance
        print ("Sorry, you do not have a positive balance. Game over.\nYou did\
 not qualify for the final round. Better luck next time.")
        sys.exit()  #exits the program
    else:  # proceeds to Final J! round
        # invokes question_list method from QuestionGenerator class
        fqa = qg.question_list[-1]   
        print("\nYou have qualified for the Final J! round...")
        # displays category using get_category method
        print("\nHere's the final J! category: ", fqa.get_category())
        
    while True:  # checks for valid input of wager
        try:
            # Prompt user to enter wager for final round
            wager = int(input("Enter wager: "))  # converts input to integer type

        except ValueError:  # excludes non-integers
            print("Sorry, you did not enter an integer.")
            continue

        if wager < 0:  # excludes negative numbers
            print("Sorry, your response must not be negative.")
            continue

        if wager > int(qg.total):  # excludes wagers greater than the balance
            print("You don't have enough money to bet that amount. Try again")

        else:
            break  # breaks while loop and proceeds to Final Question
    
    # Displays the final question using get_question method
    print("\nThe Final J! question is: ", fqa.get_question())
    
    # Prompts user to enter answer to Final Question
    final_answer = input("Please type your answer: ")
    # Check if final answer is correct or not
    if final_answer.lower() == fqa.get_answer().lower():  # not case-sensitive
        print("\nYou are CORRECT. Congratulations, you gained $", wager)
        qg.total += wager  # adds wager to balance if answer is correct
    else:
        print("\nSorry, your answer is INCORRECT. You lost $", wager)
        # displays the correct answer if answer if incorrect
        print("\nThe correct answer is: ", fqa.get_answer())
        qg.total -= wager  # subtracts wager from balance if answer is incorrect

    print("\nThanks for playing. Your total prize money is $", qg.total)


def get_valid_input(prompt): # checks valid input for number of questions
    
    while True:
        try:
            number_input = int(input(prompt))  

        except ValueError:  # excludes non-integers
            print("Sorry, you did not enter an integer.")
            continue

        if number_input < 1 or number_input > 213926:
            print("Sorry, your response must be from 1 to 213926, no commas.")
            continue
        else:
            break
        
    return number_input

try:
    main()   # calls the main function
except SystemExit:   # catches SystemExit exception
    pass
